#+TITLE: Vikas's Emacs configuration
#+AUTHOR: Vikas Mishra
#+EMAIL: vikas.mishra@hey.com

* My Literate Emacs configuration

** The Past

Hello, this is my customized Emacs configuration. I started my Emacs journey
20 years ago with a hacked and copy pasted emacs configuration from all sorts
of places on the web and especially on comp.gnu.emacs. I used that for close
to 10 years and then I found Emacs Prelude. I fell in love with Prelude and
used it for many many years (~10 years). I never fullqy understood what was
inside prelude, but I used it.

There were some inconveniences such as having “C-a” work in a terminal inside
emacs, but by and large, I got ok with it. Things changed when I tried to
enable LSP and DAP and while this was supported (during later versions), I
was never fully happy with it. Regardless this was still one of the
productive times for Emacs - where I didn’t have to keep on tinkering with
it.

Then I saw spacemacs and I thought it was very well configured - I started
using that and really liked the well tested out integration of various
modes. I hated the evil mode centered build though. And the fact that every
key binding was 10 chars long. In addition, it kept getting slower and slower
for me. I figured out this was time for me to get started with my own
configuration.

** The Present

I then found out about `use-package` and I know I must have been living under
a rock for not having heard about it. Nevertheless I found out about it and
suddenly emacs configuration didn’t need to be spread out over multiple
files. I could keep it nice and organized and keep all the related
configuration to one mode together in one file. I could also split it across
multiple files, but one file was good enough.

Suddenly emacs became extremely snappy even without native compilation and it
became a pleasure to use again. As a comparison, my startup time was reduced
10x (from ~30+ seconds to ~3.15 seconds). Yes some of it is not as nice as
spacemacs, but it is good enough for me and hey that’s what matters.

The rest of the file broadly outlines my configuration - this is more for my
memory, so I remember my design decisions. If it helps anyone else that is in
a similar position as me, that’s a bonus.


* Emacs Configuration

** Basic configuration and setup
*** Package Management and straight.el

Let's setup package.el to work with ELPA, MELPA and Org repo.

    #+begin_src elisp

  (setq package-enable-at-startup nil)
  (setq package-archives
        '(("gnu" . "http://mirrors.163.com/elpa/gnu/")
          ("melpa" . "https://melpa.org/packages/")))
    #+end_src

Now let's bootstrap straight.el

    #+begin_src  elisp
  ;; =======================================================
  ;; Bootstrap straight.el
  ;; =======================================================
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  ;; Use straight.el for use-package
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
    #+end_src

*** Benchmark your start time.

In order to find out what is taking a long time in the configuration of the
package, we are going to use the benchmark-init package.  With this we can
figure out how long each step in this process takes.

    #+begin_src elisp
  (use-package benchmark-init
    :ensure t
    :config
    (add-hook 'after-init-hook 'benchmark-init/deactivate))
    #+end_src

*** No Littering

    #+begin_src elisp
  ;; Don't litter my .emacs.d
  (use-package no-littering ; Keep .emacs.d clean
    :ensure t
    :config
    (require 'recentf)
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory))
    #+end_src

*** Basic Housekeeping stuff.

I want to increase my GC threshold here so the emacs doesn't keep on doing
Garbage collection again and again.

    #+begin_src elisp
  ;; Using garbage magic hack.
  (use-package gcmh
    :config
    (gcmh-mode 1))
  ;; Setting garbage collection threshold
  (setq gc-cons-threshold (* 400 1024 1024)
        gc-cons-percentage 0.6)

  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds" (float-time (time-subtract after-init-time
                                                                         before-init-time)))
                       gcs-done)))

  ;; Silence compiler warnings as they can be pretty disruptive
  (setq comp-async-report-warnings-errors nil)
    #+end_src

We need to also setup some basic defaults for Emacs to make it more
productive. Here are these - most of them are pretty self explanatory.

    #+begin_src elisp
  ;; =======================================================
  ;; Sane defaults
  ;; =======================================================
  (setq-default
   load-prefer-newer t                                        ;; If the .el file is newer than the .elc file, use the .el file
   inhibit-startup-message t                                  ;; Don't show the startup message
   fill-column 80                                             ;; Set the fill column to 135
   frame-title-format '("" "[%b] - Emacs " emacs-version)     ;; Set a more intuitive title for emacs
   create-lockfile nil                                        ;; Do not create lockfile
   indent-tabs-mode nil                                       ;; Don't use hard tabs
   custom-file "~/.emacs.d/custom-file.el"                    ;; Name of the custom file
   auto-save-default nil                                      ;; Do I want autosave - for the time being no.
   enable-recursive-minibuffers t                             ;; Allow commands to be run on minibuffer
   x-select-enable-clipboard t                                ;; Makes killing/yanking interact with the clipboard.
   x-select-enable-primary t                                  ;; Save clipboard to kill ring before killing
   save-interprogram-paste-before-kill t                      ;; Save clipboard to kill ring before killing
   apropos-do-all t
   mouse-yank-at-point t)                                     ;; Mouse yank commands yank at point instead of at click.

  ;; Emacs can automatically create backup files. This tells Emacs to put all backups in
  ;; ~/.emacs.d/backups. More info:
  ;; http://www.gnu.org/software/emacs/manual/html_node/elisp/Backup-Files.html
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup")))
  ;; Other annoyances fixed
  ;; Enable narrowing commands.
  (put 'narrow-to-region 'disabled nil)
  (put 'narrow-to-page 'disabled nil)
  ;; Display column number in mode line.
  (column-number-mode t)
  ;; Automatically update buffers if file content on the disk has changed.
  (global-auto-revert-mode t)
  ;; Change all yes/no questions to y/n type
  (fset 'yes-or-no-p 'y-or-n-p)
  ;; Make the command key behave as 'meta'
  (when (eq system-type 'darwin)
    ;; Use my option key as meta and command key as hyper
    (setq mac-option-modifier 'meta)
    (setq mac-command-modifier 'super))

  ;; Delete whitespace just when a file is saved.
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  ;; Disable commands that are not useful
  (unbind-key "C-x C-d") ;; list-directory
  (unbind-key "C-z") ;; suspend-frame
  (unbind-key "M-o") ;; facemenu-mode
  (setq require-final-newline t)
  (setq enable-local-variables :all)

  ;; Line spacing
  (setq-default line-spacing 0.15)
  ;; Disable tool-bar-mode
  (tool-bar-mode -1)
  ;; I don't want any blinking or beeping
  (setq ring-bell-function #'ignore)
  (setq visible-bell nil)
    #+end_src


** Productivity improvements
*** Personal Key maps
    #+begin_src elisp
      ;; Define vm-map
      (define-prefix-command 'vm-map)
      (global-set-key (kbd "C-c") 'vm-map)
      (global-set-key (kbd "C-x C-m") 'execute-extended-command)
    #+end_src

*** General for doing keybindings
You can use general mode for doing keybindings. This can also be integrated with the use-package mode.
#+begin_src elisp
  (use-package general)
#+end_src

*** Crux Mode

Crux mode provides a lot of good configuration options that are very
useful. More details can be found at [[https://github.com/bbatsov/crux][Crux Home Page]].

    #+begin_src elisp
  (use-package crux
    :bind (("C-a" . crux-move-beginning-of-line)
           ("s-," . crux-find-user-init-file)
           ("C-c o" . crux-open-with)
           ("C-c t" . crux-visit-term-buffer)
           ("s-k" . crux-kill-whole-line)
           ))
    #+end_src

*** Lisp programming conveniences.

Here we create a lot of lisp conveniences such as smartparens matching,
rainbow delimiters and adding colored braces. In addition, we turn on the
electric pair mode so braces are automatically matched.

    #+begin_src elisp
  (use-package smartparens
    :config
    (add-hook 'prog-mode-hook 'smartparens-mode))
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
  (use-package rainbow-mode
    :config
    (setq rainbow-x-colors nil)
    (add-hook 'prog-mode-hook 'rainbow-mode))
  (add-hook 'prog-mode-hook 'electric-pair-mode)
    #+end_src

*** Emacs conveniences

This is a good way to jump to the last change made in the editor. Also I need
to restart emacs every now and then and =restart-emacs= is a good package to
manage that.

    #+begin_src elisp
  ;; Jump to the last change
  (use-package goto-last-change
    :defer t
    :bind (("C-;" . goto-last-change)))

  ;; Restart Emaacs easily
  (use-package restart-emacs
    :defer t)
    #+end_src

*** Vertico, Orderless and Marginalia
    Ivy is a fantastic completion framework. On it's own it is a bit plain, but
    ivy-rich, counsel and prescient make it a pretty complete package. More
    details can be found about ivy at [[https://github.com/abo-abo/swiper][Ivy Github Page]].


    #+begin_src elisp
      (use-package marginalia
        :general
        (:keymaps 'minibuffer-local-map
                  "M-A" 'marginalia-cycle)
        :custom
        (marginalia-max-relative-age 0)
        (marginalia-align 'right)
        :init
        (marginalia-mode))


      (use-package all-the-icons-completion
        :after (marginalia all-the-icons)
        :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
        :init
        (all-the-icons-completion-mode))


      (use-package vertico
        :demand t                             ; Otherwise won't get loaded immediately
        :straight (vertico :files (:defaults "extensions/*") ; Special recipe to load extensions conveniently
                           :includes (vertico-indexed
                                      vertico-flat
                                      vertico-grid
                                      vertico-mouse
                                      vertico-quick
                                      vertico-buffer
                                      vertico-repeat
                                      vertico-reverse
                                      vertico-directory
                                      vertico-multiform
                                      vertico-unobtrusive
                                      ))
        :general
        (:keymaps '(normal insert visual motion)
                  "M-." #'vertico-repeat
                  )
        (:keymaps 'vertico-map
                  "<tab>" #'vertico-insert ; Set manually otherwise setting `vertico-quick-insert' overrides this
                  "<escape>" #'minibuffer-keyboard-quit
                  "?" #'minibuffer-completion-help
                  "C-M-n" #'vertico-next-group
                  "C-M-p" #'vertico-previous-group
                  ;; Multiform toggles
                  "<backspace>" #'vertico-directory-delete-char
                  "C-w" #'vertico-directory-delete-word
                  "C-<backspace>" #'vertico-directory-delete-word
                  "RET" #'vertico-directory-enter
                  "C-i" #'vertico-quick-insert
                  "C-o" #'vertico-quick-exit
                  "M-o" #'kb/vertico-quick-embark
                  "M-G" #'vertico-multiform-grid
                  "M-F" #'vertico-multiform-flat
                  "M-R" #'vertico-multiform-reverse
                  "M-U" #'vertico-multiform-unobtrusive
                  "C-l" #'kb/vertico-multiform-flat-toggle
                  )
        :hook ((rfn-eshadow-update-overlay . vertico-directory-tidy) ; Clean up file path when typing
               (minibuffer-setup . vertico-repeat-save) ; Make sure vertico state is saved
               )
        :custom
        (vertico-count 13)
        (vertico-resize t)
        (vertico-cycle nil)
        ;; Extensions
        (vertico-grid-separator "       ")
        (vertico-grid-lookahead 50)
        (vertico-buffer-display-action '(display-buffer-reuse-window))
        (vertico-multiform-categories
         '((file reverse)
           (consult-grep buffer)
           (consult-location)
           (imenu buffer)
           (library reverse indexed)
           (org-roam-node reverse indexed)
           (t reverse)
           ))
        (vertico-multiform-commands
         '(("flyspell-correct-*" grid reverse)
           (org-refile grid reverse indexed)
           (consult-yank-pop indexed)
           (consult-flycheck)
           (consult-lsp-diagnostics)
           ))
        :init
        (defun kb/vertico-multiform-flat-toggle ()
          "Toggle between flat and reverse."
          (interactive)
          (vertico-multiform--display-toggle 'vertico-flat-mode)
          (if vertico-flat-mode
              (vertico-multiform--temporary-mode 'vertico-reverse-mode -1)
            (vertico-multiform--temporary-mode 'vertico-reverse-mode 1)))
        (defun kb/vertico-quick-embark (&optional arg)
          "Embark on candidate using quick keys."
          (interactive)
          (when (vertico-quick-jump)
            (embark-act arg)))

        ;; Workaround for problem with `tramp' hostname completions. This overrides
        ;; the completion style specifically for remote files! See
        ;; https://github.com/minad/vertico#tramp-hostname-completion
        (defun kb/basic-remote-try-completion (string table pred point)
          (and (vertico--remote-p string)
               (completion-basic-try-completion string table pred point)))
        (defun kb/basic-remote-all-completions (string table pred point)
          (and (vertico--remote-p string)
               (completion-basic-all-completions string table pred point)))
        (add-to-list 'completion-styles-alist
                     '(basic-remote           ; Name of `completion-style'
                       kb/basic-remote-try-completion kb/basic-remote-all-completions nil))
        :config
        (vertico-mode)
        ;; Extensions
        (vertico-multiform-mode)

        ;; Prefix the current candidate with “» ”. From
        ;; https://github.com/minad/vertico/wiki#prefix-current-candidate-with-arrow
        (advice-add #'vertico--format-candidate :around
                    (lambda (orig cand prefix suffix index _start)
                      (setq cand (funcall orig cand prefix suffix index _start))
                      (concat
                       (if (= vertico--index index)
                           (propertize "» " 'face 'vertico-current)
                         "  ")
                       cand)))
        )


      (use-package orderless
        :custom
        (completion-styles '(orderless))
        (completion-category-defaults nil)    ; I want to be in control!
        (completion-category-overrides
         '((file (styles basic-remote ; For `tramp' hostname completion with `vertico'
                         orderless
                         ))
           ))

        (orderless-component-separator 'orderless-escapable-split-on-space)
        (orderless-matching-styles
         '(orderless-literal
           orderless-prefixes
           orderless-initialism
           orderless-regexp
           ;; orderless-flex
           ;; orderless-strict-leading-initialism
           ;; orderless-strict-initialism
           ;; orderless-strict-full-initialism
           ;; orderless-without-literal          ; Recommended for dispatches instead
           ))
        (orderless-style-dispatchers
         '(prot-orderless-literal-dispatcher
           prot-orderless-strict-initialism-dispatcher
           prot-orderless-flex-dispatcher
           ))
        :init
        (defun orderless--strict-*-initialism (component &optional anchored)
          "Match a COMPONENT as a strict initialism, optionally ANCHORED.
      The characters in COMPONENT must occur in the candidate in that
      order at the beginning of subsequent words comprised of letters.
      Only non-letters can be in between the words that start with the
      initials.

      If ANCHORED is `start' require that the first initial appear in
      the first word of the candidate.  If ANCHORED is `both' require
      that the first and last initials appear in the first and last
      words of the candidate, respectively."
          (orderless--separated-by
              '(seq (zero-or-more alpha) word-end (zero-or-more (not alpha)))
            (cl-loop for char across component collect `(seq word-start ,char))
            (when anchored '(seq (group buffer-start) (zero-or-more (not alpha))))
            (when (eq anchored 'both)
              '(seq (zero-or-more alpha) word-end (zero-or-more (not alpha)) eol))))

        (defun orderless-strict-initialism (component)
          "Match a COMPONENT as a strict initialism.
      This means the characters in COMPONENT must occur in the
      candidate in that order at the beginning of subsequent words
      comprised of letters.  Only non-letters can be in between the
      words that start with the initials."
          (orderless--strict-*-initialism component))

        (defun prot-orderless-literal-dispatcher (pattern _index _total)
          "Literal style dispatcher using the equals sign as a suffix.
      It matches PATTERN _INDEX and _TOTAL according to how Orderless
      parses its input."
          (when (string-suffix-p "=" pattern)
            `(orderless-literal . ,(substring pattern 0 -1))))

        (defun prot-orderless-strict-initialism-dispatcher (pattern _index _total)
          "Leading initialism  dispatcher using the comma suffix.
      It matches PATTERN _INDEX and _TOTAL according to how Orderless
      parses its input."
          (when (string-suffix-p "," pattern)
            `(orderless-strict-initialism . ,(substring pattern 0 -1))))

        (defun prot-orderless-flex-dispatcher (pattern _index _total)
          "Flex  dispatcher using the tilde suffix.
      It matches PATTERN _INDEX and _TOTAL according to how Orderless
      parses its input."
          (when (string-suffix-p "." pattern)
            `(orderless-flex . ,(substring pattern 0 -1))))
        )

      ;; Example configuration for Consult
      (use-package consult
        ;; Replace bindings. Lazily loaded due by `use-package'.
        :bind (;; C-c bindings (mode-specific-map)
               ("C-c h" . consult-history)
               ("C-c m" . consult-mode-command)
               ("C-c k" . consult-kmacro)
               ;; C-x bindings (ctl-x-map)
               ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
               ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
               ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
               ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
               ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
               ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
               ;; Custom M-# bindings for fast register access
               ("M-#" . consult-register-load)
               ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
               ("C-M-#" . consult-register)
               ;; Other custom bindings
               ("M-y" . consult-yank-pop)                ;; orig. yank-pop
               ("<help> a" . consult-apropos)            ;; orig. apropos-command
               ;; M-g bindings (goto-map)
               ("M-g e" . consult-compile-error)
               ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
               ("M-g g" . consult-goto-line)             ;; orig. goto-line
               ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
               ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
               ("M-g m" . consult-mark)
               ("M-g k" . consult-global-mark)
               ("M-g i" . consult-imenu)
               ("M-g I" . consult-imenu-multi)
               ;; M-s bindings (search-map)
               ("M-s d" . consult-find)
               ("M-s D" . consult-locate)
               ("M-s g" . consult-grep)
               ("M-s G" . consult-git-grep)
               ("M-s r" . consult-ripgrep)
               ("M-s l" . consult-line)
               ("M-s L" . consult-line-multi)
               ("M-s m" . consult-multi-occur)
               ("M-s k" . consult-keep-lines)
               ("M-s u" . consult-focus-lines)
               ;; Isearch integration
               ("M-s e" . consult-isearch-history)
               :map isearch-mode-map
               ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
               ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
               ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
               ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
               ;; Minibuffer history
               :map minibuffer-local-map
               ("M-s" . consult-history)                 ;; orig. next-matching-history-element
               ("M-r" . consult-history))                ;; orig. previous-matching-history-element

        ;; Enable automatic preview at point in the *Completions* buffer. This is
        ;; relevant when you use the default completion UI.
        :hook (completion-list-mode . consult-preview-at-point-mode)

        ;; The :init configuration is always executed (Not lazy)
        :init

        ;; Optionally configure the register formatting. This improves the register
        ;; preview for `consult-register', `consult-register-load',
        ;; `consult-register-store' and the Emacs built-ins.
        (setq register-preview-delay 0.5
              register-preview-function #'consult-register-format)

        ;; Optionally tweak the register preview window.
        ;; This adds thin lines, sorting and hides the mode line of the window.
        (advice-add #'register-preview :override #'consult-register-window)

        ;; Use Consult to select xref locations with preview
        (setq xref-show-xrefs-function #'consult-xref
              xref-show-definitions-function #'consult-xref)

        ;; Configure other variables and modes in the :config section,
        ;; after lazily loading the package.
        :config

        ;; Optionally configure preview. The default value
        ;; is 'any, such that any key triggers the preview.
        ;; (setq consult-preview-key 'any)
        ;; (setq consult-preview-key (kbd "M-."))
        ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
        ;; For some commands and buffer sources it is useful to configure the
        ;; :preview-key on a per-command basis using the `consult-customize' macro.
        (consult-customize
         consult-theme :preview-key '(:debounce 0.2 any)
         consult-ripgrep consult-git-grep consult-grep
         consult-bookmark consult-recent-file consult-xref
         consult--source-bookmark consult--source-file-register
         consult--source-recent-file consult--source-project-recent-file
         ;; :preview-key (kbd "M-.")
         :preview-key '(:debounce 0.4 any))

        ;; Optionally configure the narrowing key.
        ;; Both < and C-+ work reasonably well.
        (setq consult-narrow-key "<") ;; (kbd "C-+")

        ;; Optionally make narrowing help available in the minibuffer.
        ;; You may want to use `embark-prefix-help-command' or which-key instead.
        ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

        ;; By default `consult-project-function' uses `project-root' from project.el.
        ;; Optionally configure a different project root function.
        ;; There are multiple reasonable alternatives to chose from.
        ;;;; 1. project.el (the default)
        ;; (setq consult-project-function #'consult--default-project--function)
        ;;;; 2. projectile.el (projectile-project-root)
        ;; (autoload 'projectile-project-root "projectile")
        ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
        ;;;; 3. vc.el (vc-root-dir)
        ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
        ;;;; 4. locate-dominating-file
        ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
      )
#+end_src

*** Support for Terminal - vterm
The best support for a terminal provided in emacs is by vterm. This code segment below is for vterm support
#+begin_src elisp
  (use-package vterm
    :ensure t)
  (setq crux-term-buffer-name "vterm")
  (use-package vterm-toggle
    :ensure t
    :config
    (define-key vm-map (kbd "t") 'vterm-toggle)
    (define-key vm-map (kbd "s") 'vterm-toggle-cd)

    ;; you can cd to the directory where your previous buffer file exists
    ;; after you have toggle to the vterm buffer with `vterm-toggle'.
    (define-key vterm-mode-map [(control return)]   #'vterm-toggle-insert-cd)

    ;; Switch to next vterm buffer
    (define-key vterm-mode-map (kbd "s-n")   'vterm-toggle-forward)
    ;; Switch to previous vterm buffer
    (define-key vterm-mode-map (kbd "s-p")   'vterm-toggle-backward)
    )

#+end_src

*** All-the-icons - support for Dired as well as modeline file icon Support
#+begin_src elisp
  (use-package all-the-icons-dired
    :after all-the-icons
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package all-the-icons-completion
  :after (marginalia all-the-icons)
  :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
  :init
  (all-the-icons-completion-mode))
#+end_src

*** Miscellaneous Support
Support for zap and beacon. Zap is to delete chars upto
#+begin_src elisp
  ;; Delete to a char.
  (use-package zop-to-char
    :init
    (global-set-key [remap zap-to-char] 'zop-to-char))

  ;; Flash the line on a context change.
  (use-package beacon
    :config
    (beacon-mode 1))
    #+end_src


** Modeline support
*** Support for doom Modeline
Support for modeline for emacs.
    #+begin_src elisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-lsp t)
    (setq doom-modeline-minor-modes t)
    (setq doom-modeline-project-detection 'projectile)
    (setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))
    ;; Whether display the buffer encoding.
    (setq doom-modeline-buffer-encoding nil)
    (setq doom-modeline-env-version t)
    (setq doom-modeline-env-enable-python t))

  ;; =======================================================
  ;; Minor mode menu for mode-line
  ;; =======================================================
  (use-package minions
    :config
    (minions-mode 1)
    (global-set-key [S-down-mouse-3] 'minions-minor-modes-menu))

  (use-package diminish
    :config (diminish 'eldoc-mode))
#+end_src

** Support for search
*** Support Search
Support for searching programs.
    #+begin_src elisp
  (use-package fzf)
  (use-package ag
    :ensure t
    :commands (ag ag-regexp ag-project))

  (use-package ripgrep)
  ;; Deadgrep is the best way to search in a repo
  (use-package deadgrep
    :bind (("C-c h" . #'deadgrep)))
  ;; Visual reegular expressions. This is the boss
  (use-package visual-regexp
    :bind (("C-c 5" . #'vr/replace)))
    #+end_src

** Programming Support
*** Treemacs Support
Treemacs is like a buffer list or file list plugin for the Emacs. The code below enables it.

    #+begin_src elisp
  (use-package treemacs
    :config
    (setq treemacs-width 25
          treemacs-follow-mode -1
          treemacs-tag-follow-mode -1
          treemacs-is-never-other-window t
          treemacs-follow-after-init t
          treemacs-icon-open-png   (propertize "⊖ " 'face 'treemacs-directory-face)
          treemacs-icon-closed-png (propertize "⊕ " 'face 'treemacs-directory-face))
    (define-key treemacs-mode-map [mouse-1]
                #'treemacs-single-click-expand-action)
    :bind ( "M-0" . treemacs-select-window)
    )

  (setq treemacs-autopeek-mode nil)

  (defun treemacs-toggle-autopeek ()
    (interactive)
    (if treemacs-autopeek-mode
        (progn
          (setq treemacs-autopeek-mode nil)
          (message "Treemacs autopeek: OFF"))
      (setq treemacs-autopeek-mode t)
      (message "Treemacs autopeek: ON")))

  (use-package treemacs-projectile)
  (use-package treemacs-magit)
    #+end_src

*** Tree sitter mode
Tree sitter supports finer grained parsing system. It is supposed to
understand the code structurally. Adding support for tree-sitter and also
enabling it for python.

    #+begin_src elisp
  (use-package tree-sitter)
  (use-package tree-sitter-langs)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
  ;; Enable tree-sitter mode for all supported modes.
  (global-tree-sitter-mode)
    #+end_src

*** Version Control Support
Magit is the best support program for Emacs. And git gutter is used to show
the lines that have changed in the gutter. Very handy.

    #+begin_src elisp
  ;; Magit
  (use-package magit
    :bind ("C-x g" . magit-status))

  (use-package git-gutter
    :config
    (global-git-gutter-mode 't))
    #+end_src

*** General Programming configuration - LSP, DAP
This is the generic support for LSP and DAP. LSP is the global Languager
server project that makes Emacs even more attractive. DAP is the debug
adapter protocol. And helps in having debugger working with a modern UI from
within Emacs.

    #+begin_src elisp
  (use-package lsp-mode
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "s-l")
    :config
    (lsp-register-custom-settings
     '(("pyls.plugins.pyls_mypy.enabled" t t)
       ("pyls.plugins.pyls_mypy.live_mode" nil t)
       ("pyls.plugins.pyls_black.enabled" t t)
       ("pyls.plugins.pyls_isort.enabled" t t)))
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
           ;; if you want which-key integration
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)
  (use-package lsp-ui
    :config
    (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
    (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)
    (setq lsp-ui-sideline-enable t
          lsp-ui-sideline-update-mode 'line
          lsp-ui-sideline-show-code-actions t
          lsp-ui-sideline-show-hover nil
          lsp-ui-doc-enable t
          lsp-ui-doc-include-signature t
          lsp-eldoc-enable-hover t ; Disable eldoc displays in minibuffer
          lsp-ui-imenu-enable t
          lsp-ui-peek-always-show t
          lsp-ui-sideline-ignore-duplicate t
          lsp-headerline-breadcrumb-enable t))

  ;; if you are ivy user
  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
  (lsp-treemacs-sync-mode 1)

  (use-package dap-mode
    :config
    (setq dap-auto-configure-features '(sessions locals controls tooltip))
    (dap-ui-mode 1)
    ;; enables mouse hover support
    (dap-tooltip-mode 1)
    ;; use tooltips for mouse hover
    ;; if it is not enabled `dap-mode' will use the minibuffer.
    (tooltip-mode 1)
    ;; displays floating panel with debug buttons
    ;; requies emacs 26+
    (dap-ui-controls-mode 1)
    )
    #+end_src

*** Completion support - Company
This section supports the completion method using company.
    #+begin_src elisp
  (use-package company
    :ensure company-box
    :init
    (global-company-mode t)
    (global-set-key (kbd "M-/") 'company-complete)

    ;; (add-hook 'comint-mode-hook 'company-mode)
    :config
    (setq company-tooltip-limit 10)
    (setq company-dabbrev-downcase 0)
    (setq company-idle-delay 0)
    (setq company-echo-delay 0.1)
    (setq company-minimum-prefix-length 2)
    (setq company-require-match nil)
    (setq company-selection-wrap-around t)
    (setq company-tooltip-align-annotations t)
    (setq company-show-numbers t)
    ;; (setq company-tooltip-flip-when-above t)
    (setq company-transformers '(company-sort-by-occurrence)) ; weight by frequency
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous)
    (define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)
    (define-key company-active-map (kbd "<tab>") 'company-complete-common-or-cycle)
    (define-key company-active-map (kbd "S-TAB") 'company-select-previous)
    (define-key company-active-map (kbd "<backtab>") 'company-select-previous))

  (use-package company-box
    :ensure frame-local
    :hook (company-mode . company-box-mode))

  ;; Enable tabnine based AI completion
  ;; Tabnine company
  (use-package company-tabnine :ensure t)
  (add-to-list 'company-backends #'company-tabnine)
    #+end_src

*** Programming support - Snippets
Using yasnippet to support the programming templates.
    #+begin_src elisp
  (use-package yasnippet
    :config
    (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
    (yas-global-mode 1))
  (use-package yasnippet-snippets)
    #+end_src

*** Enable insertion of the shebang automatically

    #+begin_src elisp
  (use-package insert-shebang)
  (setq insert-shebang-file-types
        '(("py" . "python3")
          ("groovy" . "groovy")
          ("fish" . "fish")
          ("robot" . "robot")
          ("rb" . "ruby")
          ("lua" . "lua")
          ("php" . "php")
          ("sh" . "bash")
          ("pl" . "perl")
          ("raku" . "raku")))
  (add-hook 'after-save-hook
            'executable-make-buffer-file-executable-if-script-p)
    #+end_src


** Programming Language support
*** Programming Support - Python
For python we will use the pyright language server. The code below sets up
the pyright language server and the support for blacken etc for overall
python support.

    #+begin_src elisp
  ;; Enable pyright support
  (use-package lsp-pyright
    :hook
    (python-mode . (lambda ()
                     (require 'lsp-pyright)
                     (lsp))))

  ;; Use blacken for python formatting
  (use-package blacken
    :config
    (add-hook 'python-mode-hook 'blacken-mode))
  (setq python-shell-interpreter "/Users/vikasmis/anaconda/bin/python3")

  ;; Enable dap for python
  (require 'dap-python)
    #+end_src

*** Support for my shell environments - zsh and fish
Zsh, bash etc are supported by default. Fish isn't. The code below supports that.

    #+begin_src elisp
  (use-package fish-mode)
    #+end_src


** Conveniences - support for other modes.
*** Which key
This mode is a life saver. This helps in discovery of the keyboard shortcuts so well. Adding it here.
    #+begin_src elisp
  (use-package which-key
    :config
    (which-key-mode)
    :custom
    (which-key-idle-delay 0.3))
    #+end_src

*** Emacs undo-fu
Undo-fu allows both undo and redo in Emacs. Here is the code to enable undo-fu. This
    #+begin_src elisp
  (use-package undo-fu
    :config
    (global-unset-key (kbd "C-z"))
    (global-set-key (kbd "C-z")   'undo-fu-only-undo)
    (global-set-key (kbd "C-S-z") 'undo-fu-only-redo))
    #+end_src

*** Moving windows
I use three key modes here =windmove=, =ace-window= and =winnum=
mode. Perhaps an overkill to have all of them, but I have added them just in
case I decide to use one of them. I am sure once I use regularly, I can
decide to narrow down to only one or two at the most.

    #+begin_src elisp
  (use-package ace-window
    :config
    ;; Show the window designators in the modeline.
    (ace-window-display-mode)
    ;; Make the number indicators a little larger. I'm getting old.
    (set-face-attribute 'aw-leading-char-face nil :height 4.0 :background "black")
    (defun my-ace-window (args)
      "As ace-window, but hiding the cursor while the action is active."
      (interactive "P")
      (cl-letf
          ((cursor-type nil)
           (cursor-in-non-selected-window nil))
        (ace-window nil)))
    :bind (("C-," . my-ace-window))
    :custom
    (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l) "Designate windows by home row keys, not numbers.")
    (aw-background nil))

  ;; Enable moving with super
  (windmove-default-keybindings 'super)
  ;; wrap around at edges
  (setq windmove-wrap-around t)

  ;; Using winnum to move the windows.
  (use-package winum
    :config
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window)
    (define-key winum-keymap (kbd "M-1") 'winum-select-window-1)
    (define-key winum-keymap (kbd "M-2") 'winum-select-window-2)
    (define-key winum-keymap (kbd "M-3") 'winum-select-window-3)
    (define-key winum-keymap (kbd "M-4") 'winum-select-window-4)
    (define-key winum-keymap (kbd "M-5") 'winum-select-window-5)
    (define-key winum-keymap (kbd "M-6") 'winum-select-window-6)
    (define-key winum-keymap (kbd "M-7") 'winum-select-window-7)
    (define-key winum-keymap (kbd "M-8") 'winum-select-window-8)
    (define-key winum-keymap (kbd "M-9") 'winum-select-window-9)
    (define-key winum-keymap (kbd "C-`") 'winum-select-window-by-number)
    (winum-mode)
    )
#+end_src

*** My custom Methods
There are three methods listed here - =split-and-follow-vertically=,
=split-and-follow-horizontally= and =toggle-window-split=. The vertical and
horizontal split functions do what you would expect, except that they jump to
those windows after splitting. The

The =toggle-window-split= method, toggles vertical split to horizontal and
horizontal split to vertical.

#+begin_src elisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)

  ;; My function to enable swapping from vertical split to horizontal split
  (defun toggle-window-split ()
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
               (next-win-buffer (window-buffer (next-window)))
               (this-win-edges (window-edges (selected-window)))
               (next-win-edges (window-edges (next-window)))
               (this-win-2nd (not (and (<= (car this-win-edges)
                                           (car next-win-edges))
                                       (<= (cadr this-win-edges)
                                           (cadr next-win-edges)))))
               (splitter
                (if (= (car this-win-edges)
                       (car (window-edges (next-window))))
                    'split-window-horizontally
                  'split-window-vertically)))
          (delete-other-windows)
          (let ((first-win (selected-window)))
            (funcall splitter)
            (if this-win-2nd (other-window 1))
            (set-window-buffer (selected-window) this-win-buffer)
            (set-window-buffer (next-window) next-win-buffer)
            (select-window first-win)
            (if this-win-2nd (other-window 1))))))

#+end_src

*** Show line numbers
Show me line numbers in buffers - but don't show these line numbers in either vterm or in treemacs.

#+begin_src elisp
  ;; Line numbers
  (global-display-line-numbers-mode 1)
  (defun display-line-numbers-disable-hook ()
    "Disable display-line-numbers locally."
    (display-line-numbers-mode -1))
  ;; Disable it for treemacs and vterm
  ;; Disable line-numbers minor mode for neotree
  (add-hook 'treemacs-mode-hook 'display-line-numbers-disable-hook)
  (add-hook 'vterm-mode-hook 'display-line-numbers-disable-hook)

#+end_src

*** IELM - Emacs Lisp REPL
IELM is the REPL for the Emacs lisp code. This is a must do.
#+begin_src elisp
  (use-package ielm
    :commands ielm
    :init
    (defun ielm-start-process (&rest args)
      "Start a process in a new buffer"
      (let ((progname (car args)))
        (apply 'start-process progname (concat "*" progname "*") args))))
    #+end_src



** Org Mode

This is perhaps the most important section in the entire config file. This is because this deals with the org mode stuff that I use.
#+begin_src elisp
  ;; Org mode configuration
  (use-package org
    :straight (:type built-in)
    :ensure t
    :defer nil
    :custom
    ;; Hide the leading stars in the org mode.
    (org-hide-leading-stars t)
    ;; Fancy folding for Org mode.
    (org-ellipsis " ▼ ")
    ;; Org syntax highlighting
    (org-src-fontify-natively t)
    ;; Use current window for the org mode edit source windows
    (org-src-window-setup 'current-window)
    ;; Directory where all my org files are stored
    (org-directory "~/Documents/OrgNotes/")
    (org-agenda-files '("~/Documents/OrgNotes/"))
    (org-image-actual-width 1440)
    ;; I want to log when I mark a task as done
    (org-log-done 'time)
    ;; Set org mode to start in the indented mode.
    (org-startup-indented t)
    ;; Set my sequence of todo things
    (org-todo-keywords
     '((sequence
        "NEXT(N)"  ; Task that's ready to be next. No dependencies
        "TODO(t)"  ; A task that needs doing & is ready to do
        "INPROGRESS(i)"  ; A project, which usually contains other tasks
        "WAIT(w)"  ; Something external is holding up this task
        "HOLD(h)"  ; This task is paused/on hold because of me
        "|"
        "DONE(d)"  ; Task successfully completed
        "KILL(k)") ; Task was cancelled, aborted or is no longer applicable
       (sequence
        "[ ](T)"   ; A task that needs doing
        "[-](S)"   ; Task is in progress
        "[?](W)"   ; Task is being held up or paused
        "|"
        "[X](D)")  ; Task was completed
       (sequence
        "|"
        "OKAY(o)"
        "YES(y)"
        "NO(n)")))
    ;; Org Tags
    (org-tag-alist '(
                     ;; Meeting tags
                     ("Team" . ?t)
                     ("Laguna" . ?l)
                     ("Redondo" . ?r)
                     ("Newport" . ?n)
                     ("Meeting". ?m)
                     ("Planning" . ?p)

                     ;; Work Log Tags
                     ("accomplishment" . ?a)
                     ))
    ;; My org-capture templates
    (org-capture-templates
     '(("t" "Personal todo" entry
        (file+headline +org-capture-todo-file "Inbox")
        "* TODO %?\n%i\n%a" :prepend t)
       ("l" "Laguna Todos" entry
        (file+headline "~/Documents/OrgNotes/Laguna_TODO.org" "Laguna TODOs")
        "* TODO %?\n%i\n%a" :prepend t)
       ("r" "Redondo Todos" entry
        (file+headline "~/Documents/OrgNotes/Redondo_TODO.org" "Redondo TODOs")
        "* TODO %?\n%i\n%a" :prepend t)
       ("n" "Newport Todos" entry
        (file+headline "~/Documents/OrgNotes/Newport_TODO.org" "Newport TODOs")
        "* TODO %?\n%i\n%a" :prepend t)
       ("i" "IP Team Todos" entry
        (file+headline "~/Documents/OrgNotes/Team_TODO.org" "Team TODOs")
        "* TODO %?\n%i\n%a" :prepend t)
       ("m" "Meeting"
        entry (file+datetree "~/Documents/OrgNotes/Meetings.org")
        "* %? :meeting:%^g \n:Created: %T\n** Attendees\n+ \n** Notes\n+ \n** Action Items\n*** TODO [#A] "
        :tree-type week
        :clock-in t
        :clock-resume t
        :empty-lines 0)
       ("j" "Journal" entry
        (file+olp+datetree +org-capture-journal-file)
        "* %U %?\n%i\n%a" :prepend t)))
    :bind (("C-c a" . org-agenda)
           ("C-c c" . org-capture))
    :config
    (org-indent-mode)
    )

  ;; Use fancy bullets for the org mode
  (use-package org-bullets
    :after org
    :ensure t
    :defer nil)
  ;; Enable fancy bullets for the org mode.
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

  ;; Pretty symbols
  (global-prettify-symbols-mode t)

  ;; Other global configurations for org mode.
  ;; I want to open org link in other windows - not the same window.
  (setf (alist-get 'file org-link-frame-setup) #'find-file-other-window)

  (setq org-roam-directory (file-truename "~/Documents/OrgNotes/roam"))
  ;; Configure org-roam
  (use-package org-roam
    :demand t
    :straight (:host github :repo "org-roam/org-roam"
                     :files (:defaults "extensions/*"))
    :after org
    :defer nil
    :ensure t
    :bind (("C-c n f" . org-roam-node-find)
           ("C-c n r" . org-roam-node-random)
           (:map org-mode-map
                 (("C-c n i" . org-roam-node-insert)
                  ("C-c n o" . org-id-get-create)
                  ("C-c n t" . org-roam-tag-add)
                  ("C-c n a" . org-roam-alias-add)
                  ("C-c n l" . org-roam-buffer-toggle)))))

  ;; Load my custom agenda configuration for Org mode.
  (add-to-list 'load-path "~/.emacs.custom/lisp/")
  (require 'vm-agenda)

  ;; Configure org-download
  (use-package org-download
    :custom
    (org-download-method 'attach)
    (org-download-timestamp "_%Y%m%d_%H%M%S")
    (org-download-screenshot-method "screencapture -i %s")
    (org-download-link-format "[[download:%s]]\n")
    (org-download-display-inline-images t)
    :bind
    (("C-c p" . org-download-screenshot))
    )

  (setq-default org-attach-id-dir (expand-file-name ".attach/" org-directory))

  (use-package org-modern
    :custom
    ;; Edit settings
    (org-auto-align-tags nil)
    (org-tags-column 0)
    ;; org-modern-tag nil
    (org-catch-invisible-edits 'show-and-error)
    (org-special-ctrl-a/e t)
    (org-insert-heading-respect-content t)

    ;; Org styling, hide markup etc.
    (org-hide-emphasis-markers t)
    (org-pretty-entities t)
    (org-modern-star '("◉" "○" "◈" "◇" "◇" "◇" "*"))
    (org-modern-priority nil)
    (org-modern-todo nil)

    ;; Agenda styling
    (org-agenda-tags-column 0)
    (org-agenda-block-separator ?─)
    (org-agenda-time-grid
     '((daily today require-timed)
       (800 1000 1200 1400 1600 1800 2000)
       " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄"))
    (org-agenda-current-time-string
     "⭠ now ─────────────────────────────────────────────────")
    :config
    (global-org-modern-mode)
    )


  ;; ;; Configure deft
  (use-package deft
    :custom
    (deft-default-extension "org")
    (deft-extensions '("org"))
    (deft-directory "~/Documents/OrgNotes")
    (deft-recursive nil)
    (deft-recursive-ignore-dir-regexp "\\(?:\\.\\|\\.\\.|daily\\)$")
    (deft-use-filename-as-title nil)
    (deft-use-filter-string-for-filename t)
    (deft-file-naming-rules '((noslash . "-")
                              (nospace . "-")
                              (case-fn . downcase)))
    (deft-text-mode 'org-mode)
    :bind
    (("C-c d" . deft)
     ("C-x C-g" . deft-find-file))
    )

  ;; Org contrib
  (use-package org-contrib)
#+end_src


** Colors, UI and the fonts
*** Helpful
Helpul mode for expanded help functions.
    #+begin_src elisp
      (use-package helpful
        :bind
        (("C-h k" . helpful-key)
         ("C-c C-d" . helpful-at-point)
         ("C-h F" . helpful-function)
         ("C-h C" . helpful-comman)
         )
        :config
        (setq counsel-describe-function-function #'helpful-callable)
        (setq counsel-describe-variable-function #'helpful-variable)
        )
    #+end_src

*** Favorite Color Theme - Tommorrow Night Bright
    #+begin_src elisp
  (use-package color-theme-sanityinc-tomorrow
    :ensure t
    :defer t)
  (load-theme 'sanityinc-tomorrow-bright t)
    #+end_src

*** Final UI - font
    #+begin_src elisp
  (set-frame-font "CaskaydiaCove Nerd Font 18"  nil t)
#+end_src
