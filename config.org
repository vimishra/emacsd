#+TITLE: Vikas's Emacs configuration
#+AUTHOR: Vikas Mishra
#+EMAIL: vikas.mishra@hey.com

* My Literate Emacs configuration

** The Past

   Hello, this is my customized Emacs configuration. I started my Emacs journey
   20 years ago with a hacked and copy pasted emacs configuration from all sorts
   of places on the web and especially on comp.gnu.emacs. I used that for close
   to 10 years and then I found Emacs Prelude. I fell in love with Prelude and
   used it for many many years (~10 years). I never fullqy understood what was
   inside prelude, but I used it.

   There were some inconveniences such as having “C-a” work in a terminal inside
   emacs, but by and large, I got ok with it. Things changed when I tried to
   enable LSP and DAP and while this was supported (during later versions), I
   was never fully happy with it. Regardless this was still one of the
   productive times for Emacs - where I didn’t have to keep on tinkering with
   it.

   Then I saw spacemacs and I thought it was very well configured - I started
   using that and really liked the well tested out integration of various
   modes. I hated the evil mode centered build though. And the fact that every
   key binding was 10 chars long. In addition, it kept getting slower and slower
   for me. I figured out this was time for me to get started with my own
   configuration.


** The Present

   I then found out about `use-package` and I know I must have been living under
   a rock for not having heard about it. Nevertheless I found out about it and
   suddenly emacs configuration didn’t need to be spread out over multiple
   files. I could keep it nice and organized and keep all the related
   configuration to one mode together in one file. I could also split it across
   multiple files, but one file was good enough.

   Suddenly emacs became extremely snappy even without native compilation and it
   became a pleasure to use again. As a comparison, my startup time was reduced
   10x (from ~30+ seconds to ~3.15 seconds). Yes some of it is not as nice as
   spacemacs, but it is good enough for me and hey that’s what matters.

   The rest of the file broadly outlines my configuration - this is more for my
   memory, so I remember my design decisions. If it helps anyone else that is in
   a similar position as me, that’s a bonus.


* Emacs Configuration

** Package Management and straight.el

   Let's setup package.el to work with ELPA, MELPA and Org repo.

   #+begin_src elisp

     (setq package-enable-at-startup nil)
     (setq package-archives
	     '(("gnu" . "http://mirrors.163.com/elpa/gnu/")
	       ("melpa" . "https://melpa.org/packages/")
	       ("org" . "http://orgmode.org/elpa/")))

   #+end_src


   Now let's bootstrap straight.el

   #+begin_src  elisp
     ;; =======================================================
     ;; Bootstrap straight.el
     ;; =======================================================
     (defvar bootstrap-version)
     (let ((bootstrap-file
	    (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	   (bootstrap-version 5))
       (unless (file-exists-p bootstrap-file)
	 (with-current-buffer
	     (url-retrieve-synchronously
	      "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	      'silent 'inhibit-cookies)
	   (goto-char (point-max))
	   (eval-print-last-sexp)))
       (load bootstrap-file nil 'nomessage))
     ;; Use straight.el for use-package
     (straight-use-package 'use-package)
     (setq straight-use-package-by-default t)
   #+end_src


** Benchmark your start time.

   In order to find out what is taking a long time in the configuration of the
   package, we are going to use the benchmark-init package.  With this we can
   figure out how long each step in this process takes.

   #+begin_src elisp
     (use-package benchmark-init
       :ensure t
       :config
       (add-hook 'after-init-hook 'benchmark-init/deactivate))
   #+end_src

** No Littering

   #+begin_src elisp
	  ;; Don't litter my .emacs.d
	  (use-package no-littering ; Keep .emacs.d clean
	    :ensure t
	    :config
	    (require 'recentf)
	    (add-to-list 'recentf-exclude no-littering-var-directory)
	    (add-to-list 'recentf-exclude no-littering-etc-directory))
   #+end_src


** Basic Housekeeping stuff.

   I want to increase my GC threshold here so the emacs doesn't keep on doing
   Garbage collection again and again.

   #+begin_src elisp
     ;; Using garbage magic hack.
     (use-package gcmh
       :config
       (gcmh-mode 1))
     ;; Setting garbage collection threshold
     (setq gc-cons-threshold (* 400 1024 1024)
	   gc-cons-percentage 0.6)

     ;; Profile emacs startup
     (add-hook 'emacs-startup-hook
	       (lambda ()
		 (message "*** Emacs loaded in %s with %d garbage collections."
			  (format "%.2f seconds" (float-time (time-subtract after-init-time
									    before-init-time)))
			  gcs-done)))

     ;; Silence compiler warnings as they can be pretty disruptive
     (setq comp-async-report-warnings-errors nil)
   #+end_src

   We need to also setup some basic defaults for Emacs to make it more
   productive. Here are these - most of them are pretty self explanatory.

   #+begin_src elisp
     ;; =======================================================
     ;; Sane defaults
     ;; =======================================================
     (setq-default
      load-prefer-newer t                                        ;; If the .el file is newer than the .elc file, use the .el file
      inhibit-startup-message t                                  ;; Don't show the startup message
      fill-column 80                                             ;; Set the fill column to 135
      frame-title-format '("" "[%b] - Emacs " emacs-version)     ;; Set a more intuitive title for emacs
      create-lockfile nil                                        ;; Do not create lockfile
      indent-tabs-mode nil                                       ;; Don't use hard tabs
      custom-file "~/.emacs.d/custom-file.el"                    ;; Name of the custom file
      auto-save-default nil                                      ;; Do I want autosave - for the time being no.
      enable-recursive-minibuffers t                             ;; Allow commands to be run on minibuffer
      x-select-enable-clipboard t                                ;; Makes killing/yanking interact with the clipboard.
      x-select-enable-primary t                                  ;; Save clipboard to kill ring before killing
      save-interprogram-paste-before-kill t                      ;; Save clipboard to kill ring before killing
      apropos-do-all t
      mouse-yank-at-point t)                                     ;; Mouse yank commands yank at point instead of at click.

     ;; Emacs can automatically create backup files. This tells Emacs to put all backups in
     ;; ~/.emacs.d/backups. More info:
     ;; http://www.gnu.org/software/emacs/manual/html_node/elisp/Backup-Files.html
     (setq backup-directory-alist '(("." . "~/.emacs.d/backup")))
     ;; Other annoyances fixed
     ;; Enable narrowing commands.
     (put 'narrow-to-region 'disabled nil)
     (put 'narrow-to-page 'disabled nil)
     ;; Display column number in mode line.
     (column-number-mode t)
     ;; Automatically update buffers if file content on the disk has changed.
     (global-auto-revert-mode t)
     ;; Change all yes/no questions to y/n type
     (fset 'yes-or-no-p 'y-or-n-p)
     ;; Make the command key behave as 'meta'
     (when (eq system-type 'darwin)
       ;; Use my option key as meta and command key as hyper
       (setq mac-option-modifier 'meta)
       (setq mac-command-modifier 'super))

     ;; Delete whitespace just when a file is saved.
     (add-hook 'before-save-hook 'delete-trailing-whitespace)
     ;; Disable commands that are not useful
     (unbind-key "C-x C-d") ;; list-directory
     (unbind-key "C-z") ;; suspend-frame
     (unbind-key "M-o") ;; facemenu-mode
     (setq require-final-newline t)
     (setq enable-local-variables :all)
   #+end_src

** Personal Key maps
   #+begin_src elisp
     ;; Define vm-map
     (define-prefix-command 'vm-map)
     (global-set-key (kbd "C-c") 'vm-map)
   #+end_src

** Crux Mode

   Crux mode provides a lot of good configuration options that are very
   useful. More details can be found at [[https://github.com/bbatsov/crux][Crux Home Page]].

   #+begin_src elisp
     (use-package crux
       :bind (("C-a" . crux-move-beginning-of-line)
              ("s-," . crux-find-user-init-file)
              ("C-c o" . crux-open-with)
              ("C-c t" . crux-visit-term-buffer)
              ("s-k" . crux-kill-whole-line)
              ))
   #+end_src


** Lisp programming conveniences.

   Here we create a lot of lisp conveniences such as smartparens matching,
   rainbow delimiters and adding colored braces. In addition, we turn on the
   electric pair mode so braces are automatically matched.

   #+begin_src elisp
     (use-package smartparens
       :config
       (add-hook 'prog-mode-hook 'smartparens-mode))
     (use-package rainbow-delimiters
       :config
       (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
     (use-package rainbow-mode
       :config
       (setq rainbow-x-colors nil)
       (add-hook 'prog-mode-hook 'rainbow-mode))
     (add-hook 'prog-mode-hook 'electric-pair-mode)
   #+end_src

** Emacs conveniences

   This is a good way to jump to the last change made in the editor. Also I need
   to restart emacs every now and then and =restart-emacs= is a good package to
   manage that.

   #+begin_src elisp
     ;; Jump to the last change
     (use-package goto-last-change
       :defer t
       :bind (("C-;" . goto-last-change)))

     ;; Restart Emaacs easily
     (use-package restart-emacs
       :defer t)
   #+end_src

** Enable insertion of the shebang automatically

   #+begin_src elisp
     (use-package insert-shebang)
     (setq insert-shebang-file-types
        '(("py" . "python3")
          ("groovy" . "groovy")
          ("fish" . "fish")
          ("robot" . "robot")
          ("rb" . "ruby")
          ("lua" . "lua")
          ("php" . "php")
          ("sh" . "bash")
          ("pl" . "perl")
          ("raku" . "raku")))
     (add-hook 'after-save-hook
               'executable-make-buffer-file-executable-if-script-p)
   #+end_src
